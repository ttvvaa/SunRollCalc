@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Калькулятор</title>
    <link href="@Url.Content("~/Content/main.css")" rel="stylesheet" type="text/css" />

    <link href="~/Content/bootstrap.min.css" rel="stylesheet">
    @*<link href="~/Content/font-awesome.min.css" rel="stylesheet">*@
    @*<link href="~/Content/style.css" rel="stylesheet">*@


    @*<script type="text/javascript" src="~/Scripts/vue.min.js"></script>
    <script type="text/javascript" src="~/Scripts/axios.min.js"></script>*@

	<script type="text/javascript" src="~/Scripts/vue.js"></script>
	<script type="text/javascript" src="~/Scripts/axios.js"></script>

</head>
<body>
    <h2>
        Расчет стоимости рольставни из поликарбоната
    </h2>


    <!-- template for the modal component -->
    <script type="text/x-template" id="modal-template">
        <transition name="modal">
            <div class="modal-mask">
                <div class="modal-wrapper">
					<div class="modal-container">

						@*<div class="modal-header">
							<slot name="header">Смета:</slot>
						</div>*@

						<div class="modal-body">
							<slot name="body" class="container-fluid">
								@*<div v-for="item in items" class="row">
						<div class="col-xs-6" style="background-color:lavender;">{{ item.Caption }}</div>
						<div class="col-xs-6" style="background-color:lavenderblush;">{{ item.Price }} руб.</div>
					</div>*@
								<strong>Заявка на рольставню {{ message }}</strong>
								<form id="send-smeta" @@submit.prevent="sendEmail">
									<table>
										@*<tr><td><label for="email">Ф.И.О.</label></td><td><input v-model="fio" id="fio"></td></tr>*@
										@*<tr><td><label for="email">E-mail</label></td><td><input v-model="email" id="email"></td></tr>*@
										<tr><td><label for="email">Телефон</label></td><td><input-mask v-model="phone" mask="+7 (###) ###-##-##" class="input" id="phone" required></td></tr>
									</table>
									<div v-if="status != 'OK'">
										<button class="modal-default-button" type="submit">
											Отправить
										</button>
									</div>
									<div v-else>Спасибо за заказ!</div>
									<button class="modal-default-button" type="reset" @@click="$emit('close')">
										Закрыть
									</button>
								</form>
								<h6>Отвечаем по будням, с 10:00 до 19:00. Заявка ни к чему Вас не обязывает.</h6>
                            </slot>
                        </div>

						@*<strong>{{ status }}</strong>*@

                        @*<div class="modal-footer">
                            <slot name="footer">
                                <strong>{{ message }}</strong>
								<button class="modal-default-button"  @@click="$emit('close')">
										OK
								</button>
                            </slot>
                        </div>*@
                    </div>
                </div>
            </div>
        </transition>
    </script>


    <div id="app">
        <form id="calc-form" @@submit.prevent="submitForm">
            <table>
                <tbody>
                    <tr>
                        <td>Ширина проема (мм)</td>
                        <td><input v-model="width" type="number" value="1500" min="0" max="4555"/></td>
                    </tr>
                    <tr>
                        <td>Высота проема (мм)</td>
                        <td><input v-model="height" type="number" value="2000" min="0" max="3015"/></td>
                    </tr>
                    <tr>
                        <td>Тип монтажа</td>
                        <td>
                            <input v-model="mounting" id="ext" type="radio" name="mounting" value="ext"><label for="ext">Накладной</label>
                            <input v-model="mounting" id="int" type="radio" name="mounting" value="int"><label for="int">Встроенный</label>
                        </td>
                    </tr>
                    @*<tr>
                            <td>Тип управления</td>
                            <td>
                                <input v-model="control" id="manual" type="radio" name="control" value="manual"><label for="manual">Ручной</label>
                                <input v-model="control" id="auto" type="radio" name="control" value="auto"><label for="auto">Автоматический</label>
                            </td>
                        </tr>*@
                    <tr>
                        <td></td>
                        <td><input v-model="lock" id="bLock" type="checkbox" /><label for="bLock">Замок с ключом</label></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td><input v-model="emergencyopen" id="bEmegency" type="checkbox" /><label for="bEmegency">Аварийное открытие</label></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td><input v-model="remotecontrol" id="bRemote" type="checkbox" /><label for="bRemote">Дистанционное управление</label></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td><input v-model="ismounting" id="bMount" type="checkbox" /><label for="bMount">Монтаж</label></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>
                            <input v-model="isdelivery" id="bDelivery" type="checkbox" /><label for="bDelivery">Доставка</label>
                        </td>
                    </tr>
                    <tr>
                        <td><label for="kmDelivery" :disabled="!isdelivery">Москва и область, км от МКАД</label></td>
                        <td>
                            <input v-model="kmdelivery" name="kmDelivery" value="0" :disabled="!isdelivery" min="0" max="200" />
                        </td>
                    </tr>
                </tbody>
            </table>

            <h1>{{ message }}</h1>

            <ul id="smeta">
                    <li v-for="item in items">
                        {{ item.Caption }} {{ item.Price }} руб.
                    </li>
            </ul>

            <button type="submit" value="Submit">Рассчитать стоимость</button>

            <button id="show-modal" @@click="showModal = true">Отправить заявку</button>

            @*<modal v-bind:items="items" v-bind:message="message" v-if="showModal" @@close="showModal = false">
                <h3 slot="header">Стоимость рольставни из поликарбоната</h3>
            </modal>*@

			<modal v-bind:message="message" v-bind:items="items" v-if="showModal" @@close="showModal = false">
				@*<h3 slot="header">Заказать</h3>*@
			</modal>

        </form>
    </div>


	<script>
		var tokens = {
			'#': {pattern: /\d/},
			'S': {pattern: /[a-zA-Z]/},
			'A': {pattern: /[0-9a-zA-Z]/},
			'U': {pattern: /[a-zA-Z]/, transform: v => v.toLocaleUpperCase()},
			'L': {pattern: /[a-zA-Z]/, transform: v => v.toLocaleLowerCase()}
		}
		function applyMask (value, mask, masked = true) {
			value = value || ""
			var iMask = 0
			var iValue = 0
			var output = ''
			while (iMask < mask.length && iValue < value.length) {
				cMask = mask[iMask]
				masker = tokens[cMask]
				cValue = value[iValue]
				if (masker) {
					if (masker.pattern.test(cValue)) {
						output += masker.transform ? masker.transform(cValue) : cValue
						iMask++
					}
					iValue++
				} else {
					if (masked) output += cMask
					if (cValue === cMask) iValue++
					iMask++
				}
			}
			return output
		}

			Vue.directive('mask', {
				bind (el, binding) {
				var value = el.value
				Object.defineProperty(el, 'value', {
					get: function(){
						return value;
					},
					set: function(newValue){
						console.log(newValue)
						el.setAttribute('value', newValue)
					},
					configurable: true
				});
		}
		})

		Vue.component('input-mask', {
			template: `<input v-model="maskedValue" :maxlength="mask.length" :placeholder="mask">`,
			props: {
				'value': String,
				'mask': String,
				'masked': {
					type: Boolean,
					default: false
				}
			},

		data: () => ({
			currentValue: '',
			currentMask: '',
		}),

			computed: {
			maskedValue: {
				get () {
					// fix removing mask character at the end.
					// Pressing backspace after 1.2.3 result in 1.2. instead of 1.2
					return this.value === this.currentValue ? this.currentMask
															: (this.currentMask = applyMask(this.value, this.mask, true))
				},

			  set (newValue) {
			  	var currentPosition = this.$el.selectionEnd
			  	var lastMask = this.currentMask
			  	// update the input before restoring the cursor position
			  	this.$el.value = this.currentMask = applyMask(newValue, this.mask)

			  	if (this.currentMask.length <= lastMask.length) { // BACKSPACE
			  		// when chars are removed, the cursor position is already right
			  		this.$el.setSelectionRange(currentPosition, currentPosition)
			  	} else { // inserting characters
			  		// if the substring till the cursor position is the same, don't change position
			  		if (newValue.substring(0, currentPosition) == this.currentMask.substring(0, currentPosition)) {
			  			this.$el.setSelectionRange(currentPosition, currentPosition)
			  		} else { // increment 1 fixed position, but will not work if the mask has 2+ placeholders, like: ##//##
			  			this.$el.setSelectionRange(currentPosition+1, currentPosition+1)
			  		}
			  	}
			  	this.currentValue = applyMask(newValue, this.mask, this.masked)
			  	this.$emit('input', this.currentValue)
			  }
			}
			}
		})


	Vue.component('modal', {
		props: ['items', 'message'],
		data() {
		  return { fio: '', email: '', phone: '', body: '', status: '' }
	},
	template: '#modal-template',
		methods: {
			sendEmail() {
				axios.post('/Calc/SendEmail', {
					fio: this.fio,
					email: this.email,
					phone: this.phone,
					//body: this.items + ' Price: ' + this.message
					body: '<ul id="smeta"><li v-for="item in this.items">{{ item.Caption }} {{ item.Price }} руб.</li></ul>'
				}).then(response => {
					this.status = response.data.Status;
			})
		    }
	}
	});

	new Vue({
		el: '#app',
		data() {
	return {
		items : [ ],
	message: '0',
	width: '2000',
	height: '1000',
	mounting: 'int',
	control: 'manual',
	lock: '',
	emergencyopen: '',
	remotecontrol: '',
	ismounting: '',
	isdelivery: '',
	kmdelivery: 0,
	showModal: false,
	fio: '', email: '', phone: '', body: '', status: ''
	}
	},
	methods: {
		submitForm() {
			axios.post('/Calc/CalcPolicarbon', {
				width: this.width,
				height: this.height,
				mounting: this.mounting,
				control: this.control,
				lock:  this.lock,
				emergencyopen:  this.emergencyopen,
				remotecontrol:  this.remotecontrol,
				ismounting:  this.ismounting,
				isdelivery:  this.isdelivery,
				kmdelivery: this.kmdelivery
			}).then(response => {
				//this.message = JSON.stringify(response, null, 2)
				this.message = response.data.Price;
			this.items = response.data.Estimate;
		})
		    }

	}
	})
	</script>


</body>
</html>
